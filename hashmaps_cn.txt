1.
 Maximum Frequency Number
Send Feedback
You are given an array of integers that contain numbers in random order. Write a program to find and return the number which occurs the maximum times in the given input.
If two or more elements contend for the maximum frequency, return the element which occurs in the array first.
Input Format :

Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces

sol:
import java.util.*;
public class Solution {

	public static int maxFrequencyNumber(int[] arr){
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        int value;
        HashMap<Integer,Integer> hm = new HashMap();
       for (int i = 0; i < arr.length; i++) 
       {
        
        if ( hm.containsKey(arr[i]) )
        {
            value = hm.get(arr[i]);
            hm.put(arr[i], value + 1);
        }
        else
        {
            hm.put(arr[i], 1);
         }
       }
        int max=0,max1=0,pos=0;
      for(int i=0;i<arr.length;i++)
        {
           max=hm.get(arr[i]);
           if(max1<max)
           {
               max1=max;
               pos=arr[i];
           }
        }
        return pos;
        
		
	}
}

2.
 Print Intersection
Send Feedback
Given two random integer arrays, print their intersection. That is, print all the elements that are present in both the given arrays.
Input arrays can contain duplicate elements.
Note : Order of elements are not important
Input format :

Line 1 : Integer N, Array 1 Size
Line 2 : Array 1 elements (separated by space)
Line 3 : Integer M, Array 2 Size
Line 4 : Array 2 elements (separated by space)


sol:
import java.util.*;
public class Intersection{
	
	
    public static void intersection(int[] arr1, int[] arr2){
		/* Your class should be named Intersection
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Print output and don't return it.
	 	 * Taking input is handled automatically.
  		 */
        HashMap<Integer,Integer> map= new HashMap();
        int n=arr1.length;
        int m=arr2.length;
        for(int i=0;i<n;i++){
        if(!map.containsKey(arr1[i]))
        {
            map.put(arr1[i],1);
        }
            else{
                map.put(arr1[i],map.get(arr1[i])+1);
            }
       
        }
        for(int i=0;i<arr2.length;i++)
        {
            if(map.containsKey(arr2[i]) && map.get(arr2[i])!=0)
            {
                System.out.println(arr2[i]);
                 map.put(arr2[i],map.get(arr2[i])-1);
            }
                
        }
       
    
3.
 Pair Sum to 0
Send Feedback
Given a random integer array A of size N. Find and print the pair of elements in the array which sum to 0.
Array A can contain duplicate elements.
While printing a pair, print the smaller element first.
That is, if a valid pair is (6, -6) print "-6 6". There is no constraint that out of 5 pairs which have to be printed in 1st line. You can print pairs in any order, just be careful about the order of elements in a pair.

sol:
import java.util.*;

        
public class Solution {
	public static void PairSum(int[] input, int size) {


 HashMap<Integer, Integer> seen = new HashMap<>();
        for(int n : input){
            if(!seen.containsKey(n)){
            seen.put(n,1);
                }
            else {
                int val = seen.get(n);
                seen.put(n,val+1);
            }
            
        }
        for(int n : input){
            int neg= 0-n;
            if(seen.containsKey(neg)&& (seen.get(n)!=0) && (seen.get(neg)!=0)){
                int a= seen.get(n);
                int b= seen.get(neg);
                if(n==0){
                    for(int i=0; i<seen.get(0);i++){
                        System.out.println(0+ " "+0);
                    }
                }else{
                for(int i=0; i< (a*b);i++){
                    if(neg<n){
                        System.out.println(neg+ " "+ (n));
                    }
                    else
                    System.out.println(n+ " "+ (neg));
                }
                }
                seen.put(n, 0);
                seen.put ((neg), 0);
                }
	}
    }
}

4.
 Zero Sum Sub-Array
Send Feedback
You are given with an array (of size N) consisting of positive and negative integers that contain numbers in random order.
Write a program to return true if there exists a sub-array whose sum is zero else, return false.
Input Format :

Line 1 : An Integer N i.e. size of array 
Line 2 : N integers, elements of the array (separated by space)

sol:
import java.util.*;
public class Solution{	

	public static boolean subarraySumTo0(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
      
        // Creates an empty hashset hs 
        Set<Integer> hs = new HashSet<Integer>();  
          
        // Initialize sum of elements 
        int sum = 0;      
          
        // Traverse through the given array 
        for (int i = 0; i < input.length; i++) 
        {  
            // Add current element to sum 
            sum += input[i]; 
              
            // Return true in following cases 
            // a) Current element is 0 
            // b) sum of elements from 0 to i is 0 
            // c) sum is already present in hash map 
            if (input[i] == 0 || sum == 0 || hs.contains(sum))                          
                return true; 
              
            // Add sum to hash set 
            hs.add(sum); 
        }  
          
        // We reach here only when there is 
        // no subarray with 0 sum 
        return false; 
          
		
	}
}

5.
 Longest Subset
Send Feedback
Given an array, find and return the length of longest subarray containing equal number of 0s and 1s.
Input Format :

Line 1 : Integer N, size of array
Line 2 : Array elements (separated by space)

Output Format :

Length of longest subarray

sol:
import java.util.*;

public class Solution{
    
	public static int max(int[] arr){
        /* Your class should be named Solution
         * Don't write main().
         * Don't read input, it is passed as function argument.
         * Return output and don't print it.
         * Taking input and printing output is handled automatically.
         */
    int n=arr.length;   // Creates an empty hashMap hM 
  
        HashMap<Integer, Integer> hM 
            = new HashMap<Integer, Integer>(); 
  
        // Initialize sum of elements 
        int sum = 0; 
  
        // Initialize result 
        int max_len = 0; 
        int ending_index = -1; 
        int start_index = 0; 
  
        for (int i = 0; i < n; i++) { 
            arr[i] = (arr[i] == 0) ? -1 : 1; 
        } 
  
        // Traverse through the given array 
  
        for (int i = 0; i < n; i++) { 
            // Add current element to sum 
  
            sum += arr[i]; 
  
            // To handle sum=0 at last index 
  
            if (sum == 0) { 
                max_len = i + 1; 
                ending_index = i; 
            } 
  
            // If this sum is seen before, 
            // then update max_len if required 
            if (hM.containsKey(sum + n)) { 
                if (max_len < i - hM.get(sum + n)) { 
                    max_len = i - hM.get(sum + n); 
                    ending_index = i; 
                } 
            } 
            else // Else put this sum in hash table 
                hM.put(sum + n, i); 
        } 
  
        for (int i = 0; i < n; i++) { 
            arr[i] = (arr[i] == -1) ? 0 : 1; 
        } 
  
        int end = ending_index - max_len + 1; 
        
  
        return max_len; 
    } 
}











